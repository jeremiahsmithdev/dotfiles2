#define DEFINE_FUNC_ATTRIBUTES
#include "nvim/func_attr.h"
#undef DEFINE_FUNC_ATTRIBUTES
#ifndef DLLEXPORT
#  ifdef WIN32
#    define DLLEXPORT __declspec(dllexport)
#  else
#    define DLLEXPORT
#  endif
#endif
DLLEXPORT void do_window(int nchar, long Prenum, int xchar);
DLLEXPORT void win_set_buf(Window window, Buffer buffer, _Bool noautocmd, Error *err);
DLLEXPORT win_T *win_new_float(win_T *wp, FloatConfig fconfig, Error *err);
DLLEXPORT void win_set_minimal_style(win_T *wp);
DLLEXPORT void win_config_float(win_T *wp, FloatConfig fconfig);
DLLEXPORT void win_check_anchored_floats(win_T *win);
DLLEXPORT int win_fdccol_count(win_T *wp);
DLLEXPORT void ui_ext_win_position(win_T *wp);
DLLEXPORT void ui_ext_win_viewport(win_T *wp);
DLLEXPORT int win_split(int size, int flags);
DLLEXPORT int win_split_ins(int size, int flags, win_T *new_wp, int dir);
DLLEXPORT _Bool win_valid_floating(const win_T *win) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT _Bool win_valid(const win_T *win) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT win_T *win_find_by_handle(handle_T handle) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT _Bool win_valid_any_tab(win_T *win) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT int win_count(void);
DLLEXPORT int make_windows(int count, _Bool vertical);
DLLEXPORT void win_move_after(win_T *win1, win_T *win2);
DLLEXPORT void win_equal(win_T *next_curwin, _Bool current, int dir);
DLLEXPORT void close_windows(buf_T *buf, int keep_curwin);
DLLEXPORT _Bool one_window(void) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT _Bool one_nonfloat(void) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT _Bool last_nonfloat(win_T *wp) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT int win_close(win_T *win, _Bool free_buf);
DLLEXPORT void win_close_othertab(win_T *win, int free_buf, tabpage_T *tp);
DLLEXPORT win_T *winframe_remove(win_T *win, int *dirp, tabpage_T *tp);
DLLEXPORT void close_others(int message, int forceit);
DLLEXPORT void curwin_init(void);
DLLEXPORT void win_init_empty(win_T *wp);
DLLEXPORT int win_alloc_first(void);
DLLEXPORT void win_alloc_aucmd_win(void);
DLLEXPORT void win_init_size(void);
DLLEXPORT void free_tabpage(tabpage_T *tp);
DLLEXPORT int win_new_tabpage(int after, char_u *filename);
DLLEXPORT int may_open_tabpage(void);
DLLEXPORT int make_tabpages(int maxcount);
DLLEXPORT _Bool valid_tabpage(tabpage_T *tpc) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT int valid_tabpage_win(tabpage_T *tpc);
DLLEXPORT void close_tabpage(tabpage_T *tab);
DLLEXPORT tabpage_T *find_tabpage(int n);
DLLEXPORT int tabpage_index(tabpage_T *ftp);
DLLEXPORT void goto_tabpage(int n);
DLLEXPORT void goto_tabpage_tp(tabpage_T *tp, _Bool trigger_enter_autocmds, _Bool trigger_leave_autocmds);
DLLEXPORT void goto_tabpage_lastused(void);
DLLEXPORT void goto_tabpage_win(tabpage_T *tp, win_T *wp);
DLLEXPORT void tabpage_move(int nr);
DLLEXPORT void win_goto(win_T *wp);
DLLEXPORT tabpage_T *win_find_tabpage(win_T *win);
DLLEXPORT win_T *win_vert_neighbor(tabpage_T *tp, win_T *wp, _Bool up, long count);
DLLEXPORT win_T *win_horz_neighbor(tabpage_T *tp, win_T *wp, _Bool left, long count);
DLLEXPORT void win_enter(win_T *wp, _Bool undo_sync);
DLLEXPORT void fix_current_dir(void);
DLLEXPORT win_T *buf_jump_open_win(buf_T *buf);
DLLEXPORT win_T *buf_jump_open_tab(buf_T *buf);
DLLEXPORT void free_wininfo(wininfo_T *wip, buf_T *bp);
DLLEXPORT void win_free_grid(win_T *wp, _Bool reinit);
DLLEXPORT void win_append(win_T *after, win_T *wp);
DLLEXPORT void win_remove(win_T *wp, tabpage_T *tp);
DLLEXPORT void shell_new_rows(void);
DLLEXPORT void shell_new_columns(void);
DLLEXPORT _Bool win_did_scroll(win_T *wp);
DLLEXPORT void do_autocmd_winscrolled(win_T *wp);
DLLEXPORT void win_size_save(garray_T *gap);
DLLEXPORT void win_size_restore(garray_T *gap) FUNC_ATTR_NONNULL_ALL;
DLLEXPORT int win_comp_pos(void);
DLLEXPORT void win_reconfig_floats(void);
DLLEXPORT void win_setheight(int height);
DLLEXPORT void win_setheight_win(int height, win_T *win);
DLLEXPORT void win_setwidth(int width);
DLLEXPORT void win_setwidth_win(int width, win_T *wp);
DLLEXPORT void win_setminheight(void);
DLLEXPORT void win_setminwidth(void);
DLLEXPORT void win_drag_status_line(win_T *dragwin, int offset);
DLLEXPORT void win_drag_vsep_line(win_T *dragwin, int offset);
DLLEXPORT void set_fraction(win_T *wp);
DLLEXPORT void win_new_height(win_T *wp, int height);
DLLEXPORT void scroll_to_fraction(win_T *wp, int prev_height);
DLLEXPORT void win_set_inner_size(win_T *wp);
DLLEXPORT void win_new_width(win_T *wp, int width);
DLLEXPORT void win_comp_scroll(win_T *wp);
DLLEXPORT void command_height(void);
DLLEXPORT char_u *grab_file_name(long count, linenr_T *file_lnum);
DLLEXPORT char_u *file_name_at_cursor(int options, long count, linenr_T *file_lnum);
DLLEXPORT char_u *file_name_in_line(char_u *line, int col, int options, long count, char_u *rel_fname, linenr_T *file_lnum);
DLLEXPORT void last_status(_Bool morewin);
DLLEXPORT int tabline_height(void);
DLLEXPORT int min_rows(void);
DLLEXPORT _Bool only_one_window(void) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
DLLEXPORT void check_lnums(_Bool do_curwin);
DLLEXPORT void reset_lnums(void);
DLLEXPORT void make_snapshot(int idx);
DLLEXPORT void restore_snapshot(int idx, int close_curwin);
DLLEXPORT int switch_win(win_T **save_curwin, tabpage_T **save_curtab, win_T *win, tabpage_T *tp, _Bool no_display);
DLLEXPORT int switch_win_noblock(win_T **save_curwin, tabpage_T **save_curtab, win_T *win, tabpage_T *tp, _Bool no_display);
DLLEXPORT void restore_win(win_T *save_curwin, tabpage_T *save_curtab, _Bool no_display);
DLLEXPORT void restore_win_noblock(win_T *save_curwin, tabpage_T *save_curtab, _Bool no_display);
DLLEXPORT void switch_buffer(bufref_T *save_curbuf, buf_T *buf);
DLLEXPORT void restore_buffer(bufref_T *save_curbuf);
DLLEXPORT int match_add(win_T *wp, const char *const grp, const char *const pat, int prio, int id, list_T *pos_list, const char *const conceal_char) FUNC_ATTR_NONNULL_ARG(1, 2);
DLLEXPORT int match_delete(win_T *wp, int id, _Bool perr);
DLLEXPORT void clear_matches(win_T *wp);
DLLEXPORT matchitem_T *get_match(win_T *wp, int id);
DLLEXPORT int win_getid(typval_T *argvars);
DLLEXPORT int win_gotoid(typval_T *argvars);
DLLEXPORT void win_get_tabwin(handle_T id, int *tabnr, int *winnr);
DLLEXPORT void win_id2tabwin(typval_T *const argvars, typval_T *const rettv);
DLLEXPORT win_T *win_id2wp(typval_T *argvars);
DLLEXPORT win_T *win_id2wp_tp(typval_T *argvars, tabpage_T **tpp);
DLLEXPORT int win_id2win(typval_T *argvars);
DLLEXPORT void win_findbuf(typval_T *argvars, list_T *list);
DLLEXPORT void get_framelayout(const frame_T *fr, list_T *l, _Bool outer);
DLLEXPORT void win_ui_flush(void);
DLLEXPORT win_T *lastwin_nofloating(void);
#include "nvim/func_attr.h"
