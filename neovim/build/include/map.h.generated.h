#define DEFINE_FUNC_ATTRIBUTES
#include "nvim/func_attr.h"
#undef DEFINE_FUNC_ATTRIBUTES
#ifndef DLLEXPORT
#  ifdef WIN32
#    define DLLEXPORT __declspec(dllexport)
#  else
#    define DLLEXPORT
#  endif
#endif
DLLEXPORT kh_int_int_map_t *kh_init_int_int_map(void);
DLLEXPORT void kh_dealloc_int_int_map(kh_int_int_map_t *h);
DLLEXPORT void kh_destroy_int_int_map(kh_int_int_map_t *h);
DLLEXPORT void kh_clear_int_int_map(kh_int_int_map_t *h);
DLLEXPORT khint_t kh_get_int_int_map(const kh_int_int_map_t *h, int key);
DLLEXPORT void kh_resize_int_int_map(kh_int_int_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_int_int_map(kh_int_int_map_t *h, int key, int *ret);
DLLEXPORT void kh_del_int_int_map(kh_int_int_map_t *h, khint_t x);
DLLEXPORT void map_int_int_destroy(Map_int_int *map);
DLLEXPORT int map_int_int_get(Map_int_int *map, int key);
DLLEXPORT _Bool map_int_int_has(Map_int_int *map, int key);
DLLEXPORT int map_int_int_key(Map_int_int *map, int key);
DLLEXPORT int map_int_int_put(Map_int_int *map, int key, int value);
DLLEXPORT int *map_int_int_ref(Map_int_int *map, int key, _Bool put);
DLLEXPORT int map_int_int_del(Map_int_int *map, int key);
DLLEXPORT void map_int_int_clear(Map_int_int *map);
DLLEXPORT kh_cstr_t_ptr_t_map_t *kh_init_cstr_t_ptr_t_map(void);
DLLEXPORT void kh_dealloc_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h);
DLLEXPORT void kh_destroy_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h);
DLLEXPORT void kh_clear_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h);
DLLEXPORT khint_t kh_get_cstr_t_ptr_t_map(const kh_cstr_t_ptr_t_map_t *h, cstr_t key);
DLLEXPORT void kh_resize_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, cstr_t key, int *ret);
DLLEXPORT void kh_del_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, khint_t x);
DLLEXPORT void map_cstr_t_ptr_t_destroy(Map_cstr_t_ptr_t *map);
DLLEXPORT ptr_t map_cstr_t_ptr_t_get(Map_cstr_t_ptr_t *map, cstr_t key);
DLLEXPORT _Bool map_cstr_t_ptr_t_has(Map_cstr_t_ptr_t *map, cstr_t key);
DLLEXPORT cstr_t map_cstr_t_ptr_t_key(Map_cstr_t_ptr_t *map, cstr_t key);
DLLEXPORT ptr_t map_cstr_t_ptr_t_put(Map_cstr_t_ptr_t *map, cstr_t key, ptr_t value);
DLLEXPORT ptr_t *map_cstr_t_ptr_t_ref(Map_cstr_t_ptr_t *map, cstr_t key, _Bool put);
DLLEXPORT ptr_t map_cstr_t_ptr_t_del(Map_cstr_t_ptr_t *map, cstr_t key);
DLLEXPORT void map_cstr_t_ptr_t_clear(Map_cstr_t_ptr_t *map);
DLLEXPORT kh_cstr_t_int_map_t *kh_init_cstr_t_int_map(void);
DLLEXPORT void kh_dealloc_cstr_t_int_map(kh_cstr_t_int_map_t *h);
DLLEXPORT void kh_destroy_cstr_t_int_map(kh_cstr_t_int_map_t *h);
DLLEXPORT void kh_clear_cstr_t_int_map(kh_cstr_t_int_map_t *h);
DLLEXPORT khint_t kh_get_cstr_t_int_map(const kh_cstr_t_int_map_t *h, cstr_t key);
DLLEXPORT void kh_resize_cstr_t_int_map(kh_cstr_t_int_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_cstr_t_int_map(kh_cstr_t_int_map_t *h, cstr_t key, int *ret);
DLLEXPORT void kh_del_cstr_t_int_map(kh_cstr_t_int_map_t *h, khint_t x);
DLLEXPORT void map_cstr_t_int_destroy(Map_cstr_t_int *map);
DLLEXPORT int map_cstr_t_int_get(Map_cstr_t_int *map, cstr_t key);
DLLEXPORT _Bool map_cstr_t_int_has(Map_cstr_t_int *map, cstr_t key);
DLLEXPORT cstr_t map_cstr_t_int_key(Map_cstr_t_int *map, cstr_t key);
DLLEXPORT int map_cstr_t_int_put(Map_cstr_t_int *map, cstr_t key, int value);
DLLEXPORT int *map_cstr_t_int_ref(Map_cstr_t_int *map, cstr_t key, _Bool put);
DLLEXPORT int map_cstr_t_int_del(Map_cstr_t_int *map, cstr_t key);
DLLEXPORT void map_cstr_t_int_clear(Map_cstr_t_int *map);
DLLEXPORT kh_ptr_t_ptr_t_map_t *kh_init_ptr_t_ptr_t_map(void);
DLLEXPORT void kh_dealloc_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h);
DLLEXPORT void kh_destroy_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h);
DLLEXPORT void kh_clear_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h);
DLLEXPORT khint_t kh_get_ptr_t_ptr_t_map(const kh_ptr_t_ptr_t_map_t *h, ptr_t key);
DLLEXPORT void kh_resize_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, ptr_t key, int *ret);
DLLEXPORT void kh_del_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, khint_t x);
DLLEXPORT void map_ptr_t_ptr_t_destroy(Map_ptr_t_ptr_t *map);
DLLEXPORT ptr_t map_ptr_t_ptr_t_get(Map_ptr_t_ptr_t *map, ptr_t key);
DLLEXPORT _Bool map_ptr_t_ptr_t_has(Map_ptr_t_ptr_t *map, ptr_t key);
DLLEXPORT ptr_t map_ptr_t_ptr_t_key(Map_ptr_t_ptr_t *map, ptr_t key);
DLLEXPORT ptr_t map_ptr_t_ptr_t_put(Map_ptr_t_ptr_t *map, ptr_t key, ptr_t value);
DLLEXPORT ptr_t *map_ptr_t_ptr_t_ref(Map_ptr_t_ptr_t *map, ptr_t key, _Bool put);
DLLEXPORT ptr_t map_ptr_t_ptr_t_del(Map_ptr_t_ptr_t *map, ptr_t key);
DLLEXPORT void map_ptr_t_ptr_t_clear(Map_ptr_t_ptr_t *map);
DLLEXPORT kh_uint64_t_ptr_t_map_t *kh_init_uint64_t_ptr_t_map(void);
DLLEXPORT void kh_dealloc_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h);
DLLEXPORT void kh_destroy_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h);
DLLEXPORT void kh_clear_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h);
DLLEXPORT khint_t kh_get_uint64_t_ptr_t_map(const kh_uint64_t_ptr_t_map_t *h, uint64_t key);
DLLEXPORT void kh_resize_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, uint64_t key, int *ret);
DLLEXPORT void kh_del_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, khint_t x);
DLLEXPORT void map_uint64_t_ptr_t_destroy(Map_uint64_t_ptr_t *map);
DLLEXPORT ptr_t map_uint64_t_ptr_t_get(Map_uint64_t_ptr_t *map, uint64_t key);
DLLEXPORT _Bool map_uint64_t_ptr_t_has(Map_uint64_t_ptr_t *map, uint64_t key);
DLLEXPORT uint64_t map_uint64_t_ptr_t_key(Map_uint64_t_ptr_t *map, uint64_t key);
DLLEXPORT ptr_t map_uint64_t_ptr_t_put(Map_uint64_t_ptr_t *map, uint64_t key, ptr_t value);
DLLEXPORT ptr_t *map_uint64_t_ptr_t_ref(Map_uint64_t_ptr_t *map, uint64_t key, _Bool put);
DLLEXPORT ptr_t map_uint64_t_ptr_t_del(Map_uint64_t_ptr_t *map, uint64_t key);
DLLEXPORT void map_uint64_t_ptr_t_clear(Map_uint64_t_ptr_t *map);
DLLEXPORT kh_uint64_t_ssize_t_map_t *kh_init_uint64_t_ssize_t_map(void);
DLLEXPORT void kh_dealloc_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h);
DLLEXPORT void kh_destroy_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h);
DLLEXPORT void kh_clear_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h);
DLLEXPORT khint_t kh_get_uint64_t_ssize_t_map(const kh_uint64_t_ssize_t_map_t *h, uint64_t key);
DLLEXPORT void kh_resize_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h, uint64_t key, int *ret);
DLLEXPORT void kh_del_uint64_t_ssize_t_map(kh_uint64_t_ssize_t_map_t *h, khint_t x);
DLLEXPORT void map_uint64_t_ssize_t_destroy(Map_uint64_t_ssize_t *map);
DLLEXPORT ssize_t map_uint64_t_ssize_t_get(Map_uint64_t_ssize_t *map, uint64_t key);
DLLEXPORT _Bool map_uint64_t_ssize_t_has(Map_uint64_t_ssize_t *map, uint64_t key);
DLLEXPORT uint64_t map_uint64_t_ssize_t_key(Map_uint64_t_ssize_t *map, uint64_t key);
DLLEXPORT ssize_t map_uint64_t_ssize_t_put(Map_uint64_t_ssize_t *map, uint64_t key, ssize_t value);
DLLEXPORT ssize_t *map_uint64_t_ssize_t_ref(Map_uint64_t_ssize_t *map, uint64_t key, _Bool put);
DLLEXPORT ssize_t map_uint64_t_ssize_t_del(Map_uint64_t_ssize_t *map, uint64_t key);
DLLEXPORT void map_uint64_t_ssize_t_clear(Map_uint64_t_ssize_t *map);
DLLEXPORT kh_uint64_t_uint64_t_map_t *kh_init_uint64_t_uint64_t_map(void);
DLLEXPORT void kh_dealloc_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h);
DLLEXPORT void kh_destroy_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h);
DLLEXPORT void kh_clear_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h);
DLLEXPORT khint_t kh_get_uint64_t_uint64_t_map(const kh_uint64_t_uint64_t_map_t *h, uint64_t key);
DLLEXPORT void kh_resize_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h, uint64_t key, int *ret);
DLLEXPORT void kh_del_uint64_t_uint64_t_map(kh_uint64_t_uint64_t_map_t *h, khint_t x);
DLLEXPORT void map_uint64_t_uint64_t_destroy(Map_uint64_t_uint64_t *map);
DLLEXPORT uint64_t map_uint64_t_uint64_t_get(Map_uint64_t_uint64_t *map, uint64_t key);
DLLEXPORT _Bool map_uint64_t_uint64_t_has(Map_uint64_t_uint64_t *map, uint64_t key);
DLLEXPORT uint64_t map_uint64_t_uint64_t_key(Map_uint64_t_uint64_t *map, uint64_t key);
DLLEXPORT uint64_t map_uint64_t_uint64_t_put(Map_uint64_t_uint64_t *map, uint64_t key, uint64_t value);
DLLEXPORT uint64_t *map_uint64_t_uint64_t_ref(Map_uint64_t_uint64_t *map, uint64_t key, _Bool put);
DLLEXPORT uint64_t map_uint64_t_uint64_t_del(Map_uint64_t_uint64_t *map, uint64_t key);
DLLEXPORT void map_uint64_t_uint64_t_clear(Map_uint64_t_uint64_t *map);
DLLEXPORT kh_uint64_t_ExtmarkNs_map_t *kh_init_uint64_t_ExtmarkNs_map(void);
DLLEXPORT void kh_dealloc_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h);
DLLEXPORT void kh_destroy_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h);
DLLEXPORT void kh_clear_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h);
DLLEXPORT khint_t kh_get_uint64_t_ExtmarkNs_map(const kh_uint64_t_ExtmarkNs_map_t *h, uint64_t key);
DLLEXPORT void kh_resize_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h, uint64_t key, int *ret);
DLLEXPORT void kh_del_uint64_t_ExtmarkNs_map(kh_uint64_t_ExtmarkNs_map_t *h, khint_t x);
DLLEXPORT void map_uint64_t_ExtmarkNs_destroy(Map_uint64_t_ExtmarkNs *map);
DLLEXPORT ExtmarkNs map_uint64_t_ExtmarkNs_get(Map_uint64_t_ExtmarkNs *map, uint64_t key);
DLLEXPORT _Bool map_uint64_t_ExtmarkNs_has(Map_uint64_t_ExtmarkNs *map, uint64_t key);
DLLEXPORT uint64_t map_uint64_t_ExtmarkNs_key(Map_uint64_t_ExtmarkNs *map, uint64_t key);
DLLEXPORT ExtmarkNs map_uint64_t_ExtmarkNs_put(Map_uint64_t_ExtmarkNs *map, uint64_t key, ExtmarkNs value);
DLLEXPORT ExtmarkNs *map_uint64_t_ExtmarkNs_ref(Map_uint64_t_ExtmarkNs *map, uint64_t key, _Bool put);
DLLEXPORT ExtmarkNs map_uint64_t_ExtmarkNs_del(Map_uint64_t_ExtmarkNs *map, uint64_t key);
DLLEXPORT void map_uint64_t_ExtmarkNs_clear(Map_uint64_t_ExtmarkNs *map);
DLLEXPORT kh_uint64_t_ExtmarkItem_map_t *kh_init_uint64_t_ExtmarkItem_map(void);
DLLEXPORT void kh_dealloc_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h);
DLLEXPORT void kh_destroy_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h);
DLLEXPORT void kh_clear_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h);
DLLEXPORT khint_t kh_get_uint64_t_ExtmarkItem_map(const kh_uint64_t_ExtmarkItem_map_t *h, uint64_t key);
DLLEXPORT void kh_resize_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h, uint64_t key, int *ret);
DLLEXPORT void kh_del_uint64_t_ExtmarkItem_map(kh_uint64_t_ExtmarkItem_map_t *h, khint_t x);
DLLEXPORT void map_uint64_t_ExtmarkItem_destroy(Map_uint64_t_ExtmarkItem *map);
DLLEXPORT ExtmarkItem map_uint64_t_ExtmarkItem_get(Map_uint64_t_ExtmarkItem *map, uint64_t key);
DLLEXPORT _Bool map_uint64_t_ExtmarkItem_has(Map_uint64_t_ExtmarkItem *map, uint64_t key);
DLLEXPORT uint64_t map_uint64_t_ExtmarkItem_key(Map_uint64_t_ExtmarkItem *map, uint64_t key);
DLLEXPORT ExtmarkItem map_uint64_t_ExtmarkItem_put(Map_uint64_t_ExtmarkItem *map, uint64_t key, ExtmarkItem value);
DLLEXPORT ExtmarkItem *map_uint64_t_ExtmarkItem_ref(Map_uint64_t_ExtmarkItem *map, uint64_t key, _Bool put);
DLLEXPORT ExtmarkItem map_uint64_t_ExtmarkItem_del(Map_uint64_t_ExtmarkItem *map, uint64_t key);
DLLEXPORT void map_uint64_t_ExtmarkItem_clear(Map_uint64_t_ExtmarkItem *map);
DLLEXPORT kh_handle_T_ptr_t_map_t *kh_init_handle_T_ptr_t_map(void);
DLLEXPORT void kh_dealloc_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h);
DLLEXPORT void kh_destroy_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h);
DLLEXPORT void kh_clear_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h);
DLLEXPORT khint_t kh_get_handle_T_ptr_t_map(const kh_handle_T_ptr_t_map_t *h, handle_T key);
DLLEXPORT void kh_resize_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, handle_T key, int *ret);
DLLEXPORT void kh_del_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, khint_t x);
DLLEXPORT void map_handle_T_ptr_t_destroy(Map_handle_T_ptr_t *map);
DLLEXPORT ptr_t map_handle_T_ptr_t_get(Map_handle_T_ptr_t *map, handle_T key);
DLLEXPORT _Bool map_handle_T_ptr_t_has(Map_handle_T_ptr_t *map, handle_T key);
DLLEXPORT handle_T map_handle_T_ptr_t_key(Map_handle_T_ptr_t *map, handle_T key);
DLLEXPORT ptr_t map_handle_T_ptr_t_put(Map_handle_T_ptr_t *map, handle_T key, ptr_t value);
DLLEXPORT ptr_t *map_handle_T_ptr_t_ref(Map_handle_T_ptr_t *map, handle_T key, _Bool put);
DLLEXPORT ptr_t map_handle_T_ptr_t_del(Map_handle_T_ptr_t *map, handle_T key);
DLLEXPORT void map_handle_T_ptr_t_clear(Map_handle_T_ptr_t *map);
DLLEXPORT kh_String_MsgpackRpcRequestHandler_map_t *kh_init_String_MsgpackRpcRequestHandler_map(void);
DLLEXPORT void kh_dealloc_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h);
DLLEXPORT void kh_destroy_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h);
DLLEXPORT void kh_clear_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h);
DLLEXPORT khint_t kh_get_String_MsgpackRpcRequestHandler_map(const kh_String_MsgpackRpcRequestHandler_map_t *h, String key);
DLLEXPORT void kh_resize_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, String key, int *ret);
DLLEXPORT void kh_del_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, khint_t x);
DLLEXPORT void map_String_MsgpackRpcRequestHandler_destroy(Map_String_MsgpackRpcRequestHandler *map);
DLLEXPORT MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_get(Map_String_MsgpackRpcRequestHandler *map, String key);
DLLEXPORT _Bool map_String_MsgpackRpcRequestHandler_has(Map_String_MsgpackRpcRequestHandler *map, String key);
DLLEXPORT String map_String_MsgpackRpcRequestHandler_key(Map_String_MsgpackRpcRequestHandler *map, String key);
DLLEXPORT MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_put(Map_String_MsgpackRpcRequestHandler *map, String key, MsgpackRpcRequestHandler value);
DLLEXPORT MsgpackRpcRequestHandler *map_String_MsgpackRpcRequestHandler_ref(Map_String_MsgpackRpcRequestHandler *map, String key, _Bool put);
DLLEXPORT MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_del(Map_String_MsgpackRpcRequestHandler *map, String key);
DLLEXPORT void map_String_MsgpackRpcRequestHandler_clear(Map_String_MsgpackRpcRequestHandler *map);
DLLEXPORT kh_HlEntry_int_map_t *kh_init_HlEntry_int_map(void);
DLLEXPORT void kh_dealloc_HlEntry_int_map(kh_HlEntry_int_map_t *h);
DLLEXPORT void kh_destroy_HlEntry_int_map(kh_HlEntry_int_map_t *h);
DLLEXPORT void kh_clear_HlEntry_int_map(kh_HlEntry_int_map_t *h);
DLLEXPORT khint_t kh_get_HlEntry_int_map(const kh_HlEntry_int_map_t *h, HlEntry key);
DLLEXPORT void kh_resize_HlEntry_int_map(kh_HlEntry_int_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_HlEntry_int_map(kh_HlEntry_int_map_t *h, HlEntry key, int *ret);
DLLEXPORT void kh_del_HlEntry_int_map(kh_HlEntry_int_map_t *h, khint_t x);
DLLEXPORT void map_HlEntry_int_destroy(Map_HlEntry_int *map);
DLLEXPORT int map_HlEntry_int_get(Map_HlEntry_int *map, HlEntry key);
DLLEXPORT _Bool map_HlEntry_int_has(Map_HlEntry_int *map, HlEntry key);
DLLEXPORT HlEntry map_HlEntry_int_key(Map_HlEntry_int *map, HlEntry key);
DLLEXPORT int map_HlEntry_int_put(Map_HlEntry_int *map, HlEntry key, int value);
DLLEXPORT int *map_HlEntry_int_ref(Map_HlEntry_int *map, HlEntry key, _Bool put);
DLLEXPORT int map_HlEntry_int_del(Map_HlEntry_int *map, HlEntry key);
DLLEXPORT void map_HlEntry_int_clear(Map_HlEntry_int *map);
DLLEXPORT kh_String_handle_T_map_t *kh_init_String_handle_T_map(void);
DLLEXPORT void kh_dealloc_String_handle_T_map(kh_String_handle_T_map_t *h);
DLLEXPORT void kh_destroy_String_handle_T_map(kh_String_handle_T_map_t *h);
DLLEXPORT void kh_clear_String_handle_T_map(kh_String_handle_T_map_t *h);
DLLEXPORT khint_t kh_get_String_handle_T_map(const kh_String_handle_T_map_t *h, String key);
DLLEXPORT void kh_resize_String_handle_T_map(kh_String_handle_T_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_String_handle_T_map(kh_String_handle_T_map_t *h, String key, int *ret);
DLLEXPORT void kh_del_String_handle_T_map(kh_String_handle_T_map_t *h, khint_t x);
DLLEXPORT void map_String_handle_T_destroy(Map_String_handle_T *map);
DLLEXPORT handle_T map_String_handle_T_get(Map_String_handle_T *map, String key);
DLLEXPORT _Bool map_String_handle_T_has(Map_String_handle_T *map, String key);
DLLEXPORT String map_String_handle_T_key(Map_String_handle_T *map, String key);
DLLEXPORT handle_T map_String_handle_T_put(Map_String_handle_T *map, String key, handle_T value);
DLLEXPORT handle_T *map_String_handle_T_ref(Map_String_handle_T *map, String key, _Bool put);
DLLEXPORT handle_T map_String_handle_T_del(Map_String_handle_T *map, String key);
DLLEXPORT void map_String_handle_T_clear(Map_String_handle_T *map);
DLLEXPORT kh_ColorKey_ColorItem_map_t *kh_init_ColorKey_ColorItem_map(void);
DLLEXPORT void kh_dealloc_ColorKey_ColorItem_map(kh_ColorKey_ColorItem_map_t *h);
DLLEXPORT void kh_destroy_ColorKey_ColorItem_map(kh_ColorKey_ColorItem_map_t *h);
DLLEXPORT void kh_clear_ColorKey_ColorItem_map(kh_ColorKey_ColorItem_map_t *h);
DLLEXPORT khint_t kh_get_ColorKey_ColorItem_map(const kh_ColorKey_ColorItem_map_t *h, ColorKey key);
DLLEXPORT void kh_resize_ColorKey_ColorItem_map(kh_ColorKey_ColorItem_map_t *h, khint_t new_n_buckets);
DLLEXPORT khint_t kh_put_ColorKey_ColorItem_map(kh_ColorKey_ColorItem_map_t *h, ColorKey key, int *ret);
DLLEXPORT void kh_del_ColorKey_ColorItem_map(kh_ColorKey_ColorItem_map_t *h, khint_t x);
DLLEXPORT void map_ColorKey_ColorItem_destroy(Map_ColorKey_ColorItem *map);
DLLEXPORT ColorItem map_ColorKey_ColorItem_get(Map_ColorKey_ColorItem *map, ColorKey key);
DLLEXPORT _Bool map_ColorKey_ColorItem_has(Map_ColorKey_ColorItem *map, ColorKey key);
DLLEXPORT ColorKey map_ColorKey_ColorItem_key(Map_ColorKey_ColorItem *map, ColorKey key);
DLLEXPORT ColorItem map_ColorKey_ColorItem_put(Map_ColorKey_ColorItem *map, ColorKey key, ColorItem value);
DLLEXPORT ColorItem *map_ColorKey_ColorItem_ref(Map_ColorKey_ColorItem *map, ColorKey key, _Bool put);
DLLEXPORT ColorItem map_ColorKey_ColorItem_del(Map_ColorKey_ColorItem *map, ColorKey key);
DLLEXPORT void map_ColorKey_ColorItem_clear(Map_ColorKey_ColorItem *map);
DLLEXPORT void pmap_del2(Map_cstr_t_ptr_t *map, const char *key);
#include "nvim/func_attr.h"
